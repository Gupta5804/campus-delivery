pipeline {
    agent any
    stages{
        stage("Verifying tooling"){
            steps{
                sh '''
                    whoami
                    docker version
                    docker info
                    docker-compose version
                    curl --version
                    jq --version

                '''
            }
        }
        stage('Prune Docker data'){
           steps{
                sh 'docker system prune -a --volumes -f'
            }
        }
        stage('Start container'){
            steps{
                script{
                   withEnv(["ALLOWED_HOSTS = ${env.ALLOWED_HOSTS}","DATABASE_URL = ${env.DATABASE_URL}","DEBUG = ${env.DEBUG}","SECRET_KEY = ${env.SECRET_KEY}","DEFAULT_EMAIL=${env.DEFAULT_EMAIL}","ACME_CA_URI=${env.ACME_CA_URI}","NGINX_PROXY_CONTAINER=${env.NGINX_PROXY_CONTAINER}","LETSENCRYPT_HOST = ${env.LETSENCRYPT_HOST}","CSRF_TRUSTED_ORIGINS = ${env.CSRF_TRUSTED_ORIGINS}"]){

                    echo '[ALLOWED_HOSTS = ${env.ALLOWED_HOSTS},DATABASE_URL = ${env.DATABASE_URL},DEBUG = ${env.DEBUG},SECRET_KEY = ${env.SECRET_KEY}]'
                    
                    sh 'docker-compose -f docker-compose.prod.yml up -d --build'
                    sh 'docker-compose -f docker-compose.prod.yml ps'
                    

                   } 
                }
                //sh 'docker-compose -f docker-compose.prod.yml up -d --build'
                //sh 'docker-compose -f docker-compose.prod.yml ps'
            }
        }
        stage('Running tests against the container'){
            steps{
                sh 'curl http://localhost:80'
            }
        }

    }
    //post {
    //    always {
    //        sh 'docker-compose down --remove-orphans -v'
    //        sh 'docker-compose ps'
    //    }
    //}
}
