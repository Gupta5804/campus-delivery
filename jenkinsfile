pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_CMD = 'docker-compose -f docker-compose.prod.yml'
        CERTBOT_CMD = "${DOCKER_COMPOSE_CMD} run --rm certbot"
    }

    stages {
        stage("Verifying tooling") {
            steps {
                sh '''
                    whoami
                    docker version
                    docker info
                    docker-compose version
                    curl --version
                    jq --version
                '''
            }
        }

        stage("Stopping containers and Removing Containers, Volumes, Images") {
            steps {
                script {
                    sh "${DOCKER_COMPOSE_CMD} down --volumes --remove-orphans"
                    sh "${DOCKER_COMPOSE_CMD} rm -fsv"
                    sh "${DOCKER_COMPOSE_CMD} down --rmi all"
                    sh "${DOCKER_COMPOSE_CMD} down --volumes --remove-orphans"
                }
            }
        }
        

        
        stage('Start container') {
            steps {
                script {
                    withEnv([
                        "ALLOWED_HOSTS=${env.ALLOWED_HOSTS}",
                        "DATABASE_URL=${env.DATABASE_URL}",
                        "DEBUG=${env.DEBUG}",
                        "SECRET_KEY=${env.SECRET_KEY}",
                        "AWS_SES_FROM_EMAIL=${env.AWS_SES_FROM_EMAIL}",
                        "AWS_SES_ACCESS_KEY_ID=${env.AWS_SES_ACCESS_KEY_ID}",
                        "AWS_SES_SECRET_ACCESS_KEY=${env.AWS_SES_SECRET_ACCESS_KEY}",
                        "DOMAIN=${env.DOMAIN}",
                        "CORS_ALLOWED_ORIGINS=${env.CORS_ALLOWED_ORIGINS}",
                        "AUTH_COOKIE_SECURE=${env.AUTH_COOKIE_SECURE}",
                        "REDIRECT_URLS=${env.REDIRECT_URLS}",
                        "GOOGLE_AUTH_KEY=${env.GOOGLE_AUTH_KEY}",
                        "GOOGLE_AUTH_SECRET_KEY=${env.GOOGLE_AUTH_SECRET_KEY}",
                        "NEXT_PUBLIC_HOST=${env.NEXT_PUBLIC_HOST}",
                        "NEXT_PUBLIC_REDIRECT_URL=${env.NEXT_PUBLIC_REDIRECT_URL}",
                        "DJANGO_SUPERUSER_PASSWORD=${env.DJANGO_SUPERUSER_PASSWORD}",
                        "DJANGO_SUPERUSER_USERNAME=${env.DJANGO_SUPERUSER_USERNAME}",
                        "DJANGO_SUPERUSER_EMAIL=${env.DJANGO_SUPERUSER_EMAIL}",
                        "NODE_ENV=${env.NODE_ENV}",
                    ]) {
                    
                        sh "${DOCKER_COMPOSE_CMD} up -d --build"
                        sh "${DOCKER_COMPOSE_CMD} ps"
                        sh "${DOCKER_COMPOSE_CMD} logs"
                    }
                }
            }
        }
         stage('Reload Nginx for SSL') {
            steps {
                script {
                    sh "${DOCKER_COMPOSE_CMD} exec nginx nginx -s reload"
                }
            }
        }
        stage('Running tests against the container') {
            steps {
                sh 'curl https://localhost'
            }
        }

       
    }

    post {
        always {
            // Cleanup: Remove unused Docker resources
            script {
                sh 'docker system prune -f'
            }
        }
    }
}
