pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_CMD = 'docker-compose -f docker-compose.prod.yml'
        CERTBOT_CMD = "${DOCKER_COMPOSE_CMD} run --rm certbot"
    }

    stages {
        stage("Verifying tooling") {
            steps {
                sh '''
                    whoami
                    docker version
                    docker info
                    docker-compose version
                    curl --version
                    jq --version
                '''
            }
        }

        stage("Stopping containers and Removing Containers, Volumes, Images") {
            steps {
                script {
                    sh "${DOCKER_COMPOSE_CMD} down --volumes --remove-orphans"
                    sh "${DOCKER_COMPOSE_CMD} rm -fsv"
                    sh "${DOCKER_COMPOSE_CMD} down --rmi all"
                    sh "${DOCKER_COMPOSE_CMD} down --volumes --remove-orphans"
                }
            }
        }

        stage('Start Nginx container') {
            steps {
                script {
                    sh "${DOCKER_COMPOSE_CMD} up -d --build nginx"
                }
            }
        }

        stage('Renew SSL Certificate with Certbot') {
            steps {
                script {
                    withEnv([
                        // Add your environment variables as needed
                    ]) {
                        sh "${CERTBOT_CMD} certonly --webroot --webroot-path /var/www/certbot/ -d cciitbhilai.shop"
                    }
                }
            }
        }

        stage('Start container') {
            steps {
                script {
                    withEnv([
                        // Add your environment variables as needed
                    ]) {
                        sh "${DOCKER_COMPOSE_CMD} up -d --build"
                        sh "${DOCKER_COMPOSE_CMD} ps"
                    }
                }
            }
        }

        stage('Running tests against the container') {
            steps {
                sh 'curl https://localhost'
            }
        }

        stage('Reload Nginx for SSL') {
            steps {
                script {
                    sh "${DOCKER_COMPOSE_CMD} exec nginx nginx -s reload"
                }
            }
        }
    }

    post {
        always {
            // Cleanup: Remove unused Docker resources
            script {
                sh 'docker system prune -f'
            }
        }
    }
}
